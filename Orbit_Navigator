<!DOCTYPE html>
<html>
<head>
    <title>Orbit Navigator</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background: #000;
            font-family: Arial, sans-serif;
            color: white;
        }
        canvas {
            border: 2px solid #444;
            background: linear-gradient(to bottom, #0a0a2a, #1a1a4a);
        }
        #gameUI {
            position: absolute;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            text-align: center;
        }
        .stat {
            font-size: 24px;
            margin: 10px;
            text-shadow: 0 0 10px rgba(255,255,255,0.5);
        }
    </style>
</head>
<body>
    <div id="gameUI">
        <div id="score" class="stat">Score: 0</div>
        <div id="level" class="stat">Level: 1</div>
        <div id="highScore" class="stat">High Score: 0</div>
    </div>
    <canvas id="gameCanvas"></canvas>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const scoreElement = document.getElementById('score');
        const levelElement = document.getElementById('level');
        const highScoreElement = document.getElementById('highScore');

        canvas.width = 800;
        canvas.height = 600;

        let score = 0;
        let highScore = 0;
        let level = 1;
        let lastLevelUpScore = 0;
        let gameActive = true;
        let baseSpeed = 2;

        const POINTS_PER_LEVEL = 50; // Level up every 50 points

        const probe = {
            x: canvas.width / 2,
            y: canvas.height - 50,
            radius: 15,
            color: '#4f8'
        };

        let asteroids = [];
        let stardusts = [];
        let particles = [];

function createAsteroid() {
    return {
        x: Math.random() * (canvas.width - 100) + 50,
        y: -20,
        radius: 15 + Math.random() * 10,
        speed: baseSpeed * (0.8 + Math.random() * 0.4),
        orbitRadius: 20 + Math.random() * 30,
        orbitSpeed: 0.03 + Math.random() * 0.02,
        angle: Math.random() * Math.PI * 2
    };
}

function createStardust() {
    return {
        x: Math.random() * (canvas.width - 40) + 20,
        y: -20,
        radius: 8,
        speed: baseSpeed * 0.8,
        collected: false,
        sparkle: 0
    };
}

        canvas.addEventListener('mousemove', (e) => {
            const rect = canvas.getBoundingClientRect();
            probe.x = Math.max(probe.radius, 
                           Math.min(canvas.width - probe.radius, 
                           e.clientX - rect.left));
        });

        function checkLevelUp() {
            const shouldLevelUp = Math.floor(score / POINTS_PER_LEVEL) + 1;
            if (shouldLevelUp > level) {
                level = shouldLevelUp;
                baseSpeed += 0.3;
                levelElement.textContent = 'Level: ' + level;
                // Add visual feedback for level up
                addExplosion(probe.x, probe.y, '#4f8');
            }
        }

        function resetAfterHit() {
            if (score > highScore) {
                highScore = score;
                highScoreElement.textContent = 'High Score: ' + highScore;
            }
            score = 0;
            level = 1;
            baseSpeed = 2;
            scoreElement.textContent = 'Score: ' + score;
            levelElement.textContent = 'Level: ' + level;
            asteroids = [];
            stardusts = [];
            probe.x = canvas.width / 2;
            lastLevelUpScore = 0;
        }

        function createParticle(x, y, color) {
    return {
        x: x,
        y: y,
        radius: Math.random() * 3,
        color: color,
        velocity: {
            x: (Math.random() - 0.5) * 5,
            y: (Math.random() - 0.5) * 5
        },
        life: 1
    };
}

function addExplosion(x, y, color) {
    for (let i = 0; i < 20; i++) {
        particles.push(createParticle(x, y, color));
    }
}

function updateParticles() {
    for (let i = particles.length - 1; i >= 0; i--) {
        const p = particles[i];
        p.x += p.velocity.x;
        p.y += p.velocity.y;
        p.life -= 0.02;
        if (p.life <= 0) particles.splice(i, 1);
    }
}

        function updateGame() {
            asteroids.forEach(asteroid => {
                asteroid.y += asteroid.speed;
                asteroid.angle += asteroid.orbitSpeed;
            });

            stardusts.forEach(stardust => {
                stardust.y += stardust.speed;
                stardust.sparkle += 0.1;
            });

            if (Math.random() < 0.02 * level) {
                asteroids.push(createAsteroid());
            }
            if (Math.random() < 0.03) {
                stardusts.push(createStardust());
            }

            asteroids.forEach(asteroid => {
                const orbitX = asteroid.x + Math.cos(asteroid.angle) * asteroid.orbitRadius;
                const orbitY = asteroid.y;
                const dx = orbitX - probe.x;
                const dy = orbitY - probe.y;
                const distance = Math.sqrt(dx * dx + dy * dy);
                
                if (distance < probe.radius + asteroid.radius) {
                    addExplosion(probe.x, probe.y, '#f44');
                    resetAfterHit();
                }
            });

            stardusts.forEach(stardust => {
                if (!stardust.collected) {
                    const dx = stardust.x - probe.x;
                    const dy = stardust.y - probe.y;
                    const distance = Math.sqrt(dx * dx + dy * dy);
                    if (distance < probe.radius + stardust.radius) {
                        stardust.collected = true;
                        score += 10;
                        scoreElement.textContent = 'Score: ' + score;
                        addExplosion(stardust.x, stardust.y, '#ff4');
                        checkLevelUp();
                    }
                }
            });

            asteroids = asteroids.filter(a => a.y < canvas.height + 50);
            stardusts = stardusts.filter(s => s.y < canvas.height + 50);
            
            updateParticles();
        }

        function drawGame() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    // Draw background stars
    for (let i = 0; i < 50; i++) {
        ctx.beginPath();
        ctx.arc(
            Math.random() * canvas.width,
            Math.random() * canvas.height,
            Math.random(),
            0,
            Math.PI * 2
        );
        ctx.fillStyle = '#fff';
        ctx.fill();
    }

    // Draw orbit paths
    asteroids.forEach(asteroid => {
        ctx.beginPath();
        ctx.arc(asteroid.x, asteroid.y, asteroid.orbitRadius, 0, Math.PI * 2);
        ctx.strokeStyle = 'rgba(255,255,255,0.1)';
        ctx.stroke();
    });

    // Draw game objects
    asteroids.forEach(asteroid => {
        ctx.beginPath();
        const orbitX = asteroid.x + Math.cos(asteroid.angle) * asteroid.orbitRadius;
        const orbitY = asteroid.y;
        ctx.arc(orbitX, orbitY, asteroid.radius, 0, Math.PI * 2);
        ctx.fillStyle = '#f44';
        ctx.fill();
    });

    stardusts.forEach(stardust => {
        if (!stardust.collected) {
            ctx.beginPath();
            ctx.arc(stardust.x, stardust.y, 
                stardust.radius * (1 + Math.sin(stardust.sparkle) * 0.2), 
                0, Math.PI * 2);
            ctx.fillStyle = '#ff4';
            ctx.fill();
        }
    });

    // Draw particles
    particles.forEach(p => {
        ctx.beginPath();
        ctx.arc(p.x, p.y, p.radius, 0, Math.PI * 2);
        ctx.fillStyle = p.color + Math.floor(p.life * 255).toString(16);
        ctx.fill();
    });

    // Draw probe with glow effect
    ctx.beginPath();
    ctx.arc(probe.x, probe.y, probe.radius + 5, 0, Math.PI * 2);
    ctx.fillStyle = 'rgba(80, 255, 140, 0.2)';
    ctx.fill();
    
    ctx.beginPath();
    ctx.arc(probe.x, probe.y, probe.radius, 0, Math.PI * 2);
    ctx.fillStyle = probe.color;
    ctx.fill();
}

        function gameLoop() {
            if (gameActive) {
                updateGame();
                drawGame();
                requestAnimationFrame(gameLoop);
            }
        }

        gameLoop();
    </script>
</body>
</html>
