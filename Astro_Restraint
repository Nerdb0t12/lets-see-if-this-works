import React, { useState, useEffect } from 'react';

const AstroRestraint = () => {
  const [score, setScore] = useState(0);
  const [overload, setOverload] = useState(0);
  const [gameOver, setGameOver] = useState(false);
  const [timeLeft, setTimeLeft] = useState(60);
  const [position, setPosition] = useState(50);
  const [orbs, setOrbs] = useState([]);

  const gameWidth = 600;
  const gameHeight = 400;
  const shipWidth = 48;
  const orbSize = 24;

  const createOrb = () => ({
    id: Math.random(),
    x: Math.random() * (gameWidth - orbSize),
    y: -orbSize,
    type: Math.random() < 0.2 ? 'supernova' : 'energy',
    speed: Math.random() < 0.2 ? 5 : 3
  });

  useEffect(() => {
    if (gameOver) return;

    const gameInterval = setInterval(() => {
      setOrbs(currentOrbs => {
        return currentOrbs
          .filter(orb => {
            const newY = orb.y + orb.speed;
            const hitShip = newY + orbSize > gameHeight - shipWidth &&
                          orb.x + orbSize > position - shipWidth/2 &&
                          orb.x < position + shipWidth/2;
            
            if (hitShip) {
              if (orb.type === 'supernova') {
                if (Math.random() < 0.2) {
                  setGameOver(true);
                  return false;
                }
                setScore(s => s + 50);
                setOverload(o => {
                  const newO = Math.min(o + 20, 100);
                  if (newO >= 100) setGameOver(true);
                  return newO;
                });
              } else {
                setScore(s => s + 10);
              }
              return false;
            }
            return newY < gameHeight;
          })
          .map(orb => ({
            ...orb,
            y: orb.y + orb.speed
          }));
      });

      if (Math.random() < 0.08) {
        setOrbs(curr => [...curr, createOrb()]);
      }

      setTimeLeft(t => {
        if (t <= 0) {
          setGameOver(true);
          return 0;
        }
        return t - 0.1;
      });
    }, 33);

    return () => clearInterval(gameInterval);
  }, [gameOver, position]);

  return (
    <div className="flex flex-col items-center bg-indigo-900 p-4 rounded-lg">
      <div className="text-2xl text-white mb-4">Score: {score}</div>
      
      <div className="w-full h-4 bg-gray-700 rounded mb-4">
        <div 
          className="h-full bg-red-500 rounded"
          style={{ width: `${overload}%` }}
        />
      </div>
      
      <div className="text-xl text-white mb-4">
        Time: {Math.ceil(timeLeft)}s
      </div>

      <div 
        className="relative bg-indigo-950 rounded-lg overflow-hidden cursor-none"
        style={{ width: gameWidth, height: gameHeight }}
        onMouseMove={(e) => {
          const rect = e.currentTarget.getBoundingClientRect();
          const x = e.clientX - rect.left;
          setPosition(Math.max(shipWidth/2, Math.min(x, gameWidth - shipWidth/2)));
        }}
      >
        <div 
          className="absolute w-12 h-12 bg-blue-500"
          style={{ 
            left: position - shipWidth/2,
            bottom: 0,
            clipPath: 'polygon(50% 0%, 100% 100%, 50% 80%, 0% 100%)'
          }}
        />
        
        {orbs.map((orb) => (
          <div
            key={orb.id}
            className={`absolute rounded-full ${
              orb.type === 'supernova' 
                ? 'bg-orange-500 animate-pulse' 
                : 'bg-blue-300'
            }`}
            style={{ 
              left: orb.x,
              top: orb.y,
              width: orbSize,
              height: orbSize
            }}
          />
        ))}
      </div>

      {gameOver && (
        <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center">
          <div className="bg-indigo-900 p-8 rounded-lg text-center">
            <h2 className="text-2xl text-white mb-4">Game Over!</h2>
            <p className="text-xl text-white mb-4">Final Score: {score}</p>
            <button 
              className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
              onClick={() => window.location.reload()}
            >
              Play Again
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default AstroRestraint;
